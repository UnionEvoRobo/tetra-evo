This is a log of all the stuff I'm doing for thesis.

Previous to 2014-10-11:
	Explored code and found some bugs:
		Printed fitness in population file is not the same as obtained fitness from individual testing.
		Fitness is different with graphics on and graphics off.
	Created benbranch.

2014-10-11:
	Bullet installed on personal machine.
	makefile altered for personal machine.
	Modified a few files so that it would compile.

2014-10-12:
	Discovered that individuals of a generation are written to the pop file in decreasing order of fitness.
	Potential cause of buggy genotypes: genotypes contain entirely renaming and subdivisions of faces.
	Genotype does not produce same fitness on different machines (multigrain and vm).

2014-10-14:
	Runtime error:
		error while loading shared libraries: libBulletSoftBody.so
		Solution:
			Personal machine:
				sudo ldconfig
			Jupiter:
				Add to .bashrc:
					LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
					export LD_LIBRARY_PATH
	Debugging code.  Done for the night.  Left off at line 120 in genetic_algorithm.cpp

2014-10-16:
	Fixed seg fault in filehandler close function.
	Are individuals initialized before they are evaluated for the first time?
		Yes, declaring the global variable "simulation" in genetic_algorithm.cpp (but not explicitly calling "new Simulation()") calls the constructor.
	Learned the basics of gdb (so awesome and useful)

2014-10-29:
	Found screen capture software for Ubuntu (RecordMyDesktop).  Will check it out tonight.

2014-11-04:
	(over course of week)
	Screen capture software works.  Took some test footage.
	Put together presentation for thesis update (which will be on Friday).  Giving practice presentation to John tomorrow.
	Ran lots of experiments on Jupiter.  Going through the data soon.

2014-11-05:
    Practice presentation for John went well.
    Added videos to repo.  More experiments.

2014-11-09:
	Presentation went well.  Back to debugging...
	With graphics on, fitness is different every time for the same genotype.  I think it has to do with framerates and the simulation.  This code needs an overhaul.  Time to start major changes.
	Slight improvement to command line args.

2014-11-16:
	Time to be productive again!!...but wait, need another draft of my thesis paper -_-
	Gave a brief read through of paper and outlined some changes I need to make.  Will do more major changes tomorrow and Tuesday.

2015-01-21:
	Thesis update handed in, vacation had, NZ traveled, papers written, and time to get cranking on some code again.
	Made graphics and nographics both use 0.1 as timestep in simulation.
	Reorganizing code to make more sense.

2015-01-27:
	Put file handler in main so that command line args can take precedence over the config file.
	Simulation now runs with constant delta t (0.1).
	Eliminated some global variables and replaced them with locals that are passed as parameters.
	Need to fix code so that it can run with -s flag again to run a specified ruleset once.
	Need to create command line flag to run with a specified random seed.

2015-02-01:
	Fixed issue with segfautling when trying to write to pop file.  Problem was with the global variables (AGAIN).
	-s flag now works to run simulation with a specified ruleset.

2015-02-02:
	Converted genetic_algorithm from a namespace to a class to use is as an object (stupid globals again).
	Figured out how to make only one graphics window.  Will implement tomorrow.

2015-02-03:
	Still more to do on converting to one graphics window.  Too tired to code well though.
	May need to destroy and recreate simulation object after each simulation.

2015-02-04:
	Almost have it working with one graphics window.  Reorganized code so that genetic_algorithm can call graphics.  The GA no longer needs to sit inside the main graphics loop.
	Will get the code working tomorrow.  Also want to make it so that we can specify a random seed via the command line.

2015-02-05:
	Now working with one graphics window!!!!
	Also trying to reset the simulation after every individual, but not there yet.

2015-02-08:
	Simulation successfully reset before every individual.
	You can now set random seed with -r flag.
	Window title now changes to show the generation, the individual, and the grammar.

2015-02-09:
	CODE STABLE: The simulation code is now stable and more organized.  It is in a state that can be used for experiments now.
	Next step is to branch the code again to start the Pareto Frontier version.

2015-02-19:
	Created new benpareto branch to add the pareto frontier stuff.
	Started making basic changes to implement multiple fitnesses per individual.  Category window size, number of categories, vector for fitness of individual, etc.

2015-02-20:
	Good stopping point for the night.  The evaluate function now evaluates multiple expansions for one individual.

2015-02-22:
	Created qsub script and ran experiments on Jupiter.

2015-02-23:
	After running experiments on Jupiter, I was reminded of the issue where some robots get astronomically large fitness values.  This happens when the grammar has no rules for growth and only contains rules for subdividing and renaming.  I'll make this change on benbranch and try to merge the branches a bit to transfer it to benpareto.  I'll also add some code to print the parameters of the experiment to the console at the start.
	If grammar produced has no growth component, randomize it and make sure it does.

2015-03-14:
	IMPORTANT: At some point along the way, there was a merge that wasn't supposed to happen, and pareto code found its way into the benbranch code.  This commit fixes it.

